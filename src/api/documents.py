from .common import CommonAPI
import json
import requests


class DocumentAPI(CommonAPI):
    """
    Class to handle methods for documents in the Aras API.
    """

    def get_document_list(self):
        """
        Obtain a list of documents in the Aras Space.
        """
        query_url = f"{self._base_url}/server/odata/Document"

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response.json()

    def search_document_name(self, document_name):
        """
        Searches the API for a document by the given name.

        Parameters
        ----------
        document_name: str
            Client side generated document when a document is created.
        """
        # checks if document name is valid
        if not isinstance(document_name, str):
            raise ValueError(
                "document_name must be a string."
            )

        # constructs the query
        query_url = (f"{self._base_url}/server/odata/Document"
                     f"?$filter=name eq '{document_name}'"
                     )

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response.json()

    def search_document_id(self, document_id):
        """
        Searches for a document based on the database id.

        Parameters
        ----------
        document_id: str
            ID number of the document unique and generated by the database
            when the file is initially uploaded.
        """
        # checks if document_id is valid
        if not isinstance(document_id, str):
            raise ValueError(
                "document_id must be a string"
            )

        # constructs the query
        query_url = f"{self._base_url}/server/odata/Document('{document_id}')"

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response.json()

    def delete_document(self, document_id):
        """
        Delete a document from the Aras Space.

        Parameters
        ----------
        document_id: str
            unique ID number of the document to be deleted
        """
        # checks if document id is valid
        if not isinstance(document_id, str):
            raise ValueError(
                "document_id must be a string."
            )

        # constructs the query
        query_url = f"{self._base_url}/server/odata/Document('{document_id}')"

        query_response = requests.delete(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response

    def create_document(self, document_name, document_number):
        """
        Creates a document item inside of the Aras Innovator database.

        Parameters
        ----------
        document_name: str
            the name of the document being created

        document_number: str
            client generated id number of a document
            Example: "Gasket-001"
        """
        # checks variables are valid
        if not isinstance(document_name, str):
            raise ValueError(
                "document_name must be a string."
            )

        if not isinstance(document_number, str):
            raise ValueError(
                "document_number must be a string."
            )

        # constructs the query
        query_url = f"{self._base_url}/server/odata/Document"

        metadata = {
            'name': f"{document_name}",
            'item_number': f"{document_number}"
        }

        converted_metadata = json.dumps(metadata)

        query_response = requests.post(
            url=query_url,
            data=converted_metadata,
            headers=self._headers_auth
        )

        return query_response.json()

    def get_document_id(self, file_name):
        """
        Searches documents for a specific id number based on the name of the
        file.
        """
        # checks file name is valid
        if not isinstance(file_name, str):
            raise ValueError(
                "file_name must be a string."
            )

        # creates list of all documents in the space, checking for file name
        # match
        document_id = [document['id'] for document in
                       self.get_document_list()['value']
                       if document['name'] == file_name
                       ]

        return document_id
