from .common import CommonAPI
import os
import requests
import uuid


class FilesAPI(CommonAPI):
    """
    Class to handle methods pertaining to files.
    """

    def get_file_list(self):
        """
        Obtain a list of files in the Aras Space.
        """
        query_url = f"{self._base_url}/server/odata/File"

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth)

        return query_response.json()

    def search_file_id(self, file_id):
        """
        Search for a specific file based on id.

        Parameters
        ----------
        file_id: str
            ID number of the file unique and generated by the database
            when the file is initially uploaded.
        """
        # checks if document_id is valid
        if not isinstance(file_id, str):
            raise ValueError(
                "document_id must be a string"
            )

        # constructs the query
        query_url = f"{self._base_url}/server/odata/File('{file_id}')"

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response.json()

    def search_file_name(self, file_name):
        """
        Return pertinent data for a file based on name search.

        Parameters
        ----------
        file_name: str
            THe name of the file being searched.
        """
        # checks if part number is valid
        if not isinstance(file_name, str):
            raise ValueError("Part Number must be formatted as a string.")

        query_url = (
            f"{self._base_url}/server/odata/File?$"
            f"filter=filename eq '{file_name}'"
        )

        query_response = requests.get(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response.json()

    def delete_file(self, file_id):
        """
        Deletes a file from the database.

        Parameters
        ----------
        part_id: str
            unique id number that is assigned to the file when it's initially
            created.
        """
        # checks if part id is valid
        if not isinstance(file_id, str):
            raise ValueError(
                "part_id must be structured a string."
            )

        # create the query structure
        query_url = f"{self._base_url}/server/odata/File('{file_id}')"

        query_response = requests.delete(
            url=query_url,
            headers=self._headers_auth
        )

        return query_response

    def upload_file(self, file_path, file_number):
        """
        Uploads a document to the Aras API Space.

        Parameters
        ----------
        file_path: str
            local directory to the file to be uploaded

        file_number: str
            client side generated identification number of a document
        """
        # checks variables are valid
        if not isinstance(file_path, str):
            raise ValueError(
                "file_path must be a string."
            )

        if not isinstance(file_number, str):
            raise ValueError(
                "document_number must be a string."
            )

        file_name = os.path.basename(file_path)

        document_id = uuid.uuid1().hex.upper()

        # retrieve a transaction id for the upload process
        transaction_id = self._get_transaction_id()

        # chunk the file and send it to the innovator instance
        upload_results = self._send_file_chunks(file_path, transaction_id,
                                                document_id, file_number)

        # verifies the chunking process worked correctly
        for result in upload_results:
            if result.status_code != 200:
                raise ValueError(
                    "Chunk Verification Failed. Data may be corrupted."
                )

        # commits the file chunks to Aras, completing the process
        commit_response = self._commit_file_transaction(file_path,
                                                        transaction_id,
                                                        document_id, file_name)

        return commit_response

    def _get_transaction_id(self):
        """
        The first step in uploading a file to Aras. Sends a request to the
        Aras to get a transaction id which is used in the other steps
        of uploading a file.
        """
        # construct the query
        query_url = f"{self._base_url}/vault/odata/vault.BeginTransaction"

        query_response = requests.post(
            url=query_url,
            headers=self._headers_auth
        )

        transaction_id = query_response.json()['transactionId']

        return transaction_id

    def _send_file_chunks(self, file_path, transaction_id, file_id, file_name):
        """
        Chunks a file and sends chunks to the Aras environment.
        """

        CHUNK_SIZE = 10000

        file_path = os.path.abspath(file_path)

        with open(file_path, 'rb') as f:

            results = []
            size = os.path.getsize(file_path)
            start = 0
            end = 0

            while end < size - 1:
                end = start + CHUNK_SIZE

                if size - end < 0:
                    end = size

                headers = dict(self._headers_auth)
                headers['Content-Disposition'] = (
                    "attachment; filename*=utf-8''" +
                    self._escapeURL(file_name)
                )
                headers['Content-Range'] = (
                    "bytes " + str(start) + "-" + str((end - 1)) + "/"
                    + str(size)
                )
                headers['Content-Type'] = "application/octet-stream"
                headers['transactionid'] = transaction_id

                upload_url = (
                    f"{self._base_url}/vault/odata/vault."
                    f"UploadFile?fileId={file_id}"
                )
                chunk = f.read(CHUNK_SIZE)
                response = requests.post(
                    url=upload_url,
                    headers=headers,
                    data=chunk
                )

                results.append(response)
                start += CHUNK_SIZE

        return results

    def _commit_file_transaction(self, file_path, transaction_id,
                                 file_id, file_name):
        """
        Commits the final transaction after all of the file chunks have been
        uploaded.
        """
        commit_url = f"{self._base_url}/vault/odata/vault.CommitTransaction"

        commit_headers = {
            "Authorization": self._headers_auth['Authorization'],
            "Content-Type": f"multipart/mixed; boundary=batch_{file_id}",
            "transactionid": f"{transaction_id}"
        }

        EOL = "\r\n"

        size = os.path.getsize(file_path)

        commit_body = "--"
        commit_body += f"batch_{file_id}"
        commit_body += EOL
        commit_body += "Content-Type: application/http"
        commit_body += EOL
        commit_body += EOL
        commit_body += "POST " + self._base_url + "/Server/odata/File HTTP/1.1"
        commit_body += EOL
        commit_body += "Content-Type: application/json"
        commit_body += EOL
        commit_body += EOL
        commit_body += '{"id":"' + file_id + '",'
        commit_body += '"filename":"' + file_name + '",'
        commit_body += '"file_size":' + str(size) + ','
        commit_body += ('"Located":[{"file_version":1,'
                        '"related_id":"67BBB9204FE84A8981ED8313049BA06C"}]}'
                        )
        commit_body += EOL
        commit_body += "--" + f"batch_{file_id}" + "--"

        commit_res = requests.post(
            url=commit_url,
            headers=commit_headers,
            data=commit_body
        )

        return commit_res

    def _escapeURL(self, url):
        """
        Parses a url for request functionality.
        """
        url = '%25'.join(url.split('%'))
        url = '%20'.join(url.split(' '))
        url = '%27'.join(url.split("'"))
        url = '%21'.join(url.split('!'))
        url = '%22'.join(url.split('"'))
        url = '%23'.join(url.split('#'))
        url = '%24'.join(url.split('$'))
        url = '%26'.join(url.split('&'))
        url = '%28'.join(url.split('('))
        url = '%29'.join(url.split(')'))
        url = '%2A'.join(url.split('*'))
        url = '%2B'.join(url.split('+'))
        url = '%3F'.join(url.split('?'))

        return url
